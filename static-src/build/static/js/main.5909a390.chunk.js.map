{"version":3,"sources":["Game.js","index.js"],"names":["library","add","faUser","faRobot","faRedoAlt","BoardLoading","props","state","text","this","React","Component","BoardMove","move","type","MOVE_TYPE","options","value","roleClass","_","O","X","className","nextProp","currentState","BoardNotification","won","wonState","window","location","reload","notification","notificationClassName","WON","LOST","DREW","id","onClick","refreshWindow","icon","deltaProps","Board","TURN","OTHER","THIS","WON_STATE","NONE","possibleMoves","possibleMoveArray","boardState","ff","fs","ft","sf","ss","st","tf","ts","tt","gameStatus","connected","status","turn","onUserMove","bind","onGameMove","onGameEnd","updateBoard","axios","post","data","JSON","stringify","playerType","response","ai","valid","pid","gid","socket","io","emit","game","player","on","event","index","currentTarget","getAttribute","rowIndex","colIndex","row","col","requestMove","Object","assign","setState","responseMove","updateMove","whoWon","newState","moveArray","forEach","positionMove","firstIndex","secondIndex","data-location","GameOption","humanGame","aiGame","information","label","handle","to","GameOptionMenu","FetchName","MainMenu","exact","path","RoleSelect","onSelect","x","createRef","o","target","current","ref","Game","showStates","LOADING","ROLESELECT","HUMANNAME","GAMEINIT","SHOW_STATE","PLAYER_TYPE","onRoleSelect","content","GameRoot","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5909a390.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./css/game.css\";\nimport io from \"socket.io-client\";\nimport axios from \"axios\";\nimport {Link, HashRouter as Router, Route} from \"react-router-dom\";\nimport {library} from \"@fortawesome/fontawesome-svg-core\";\nimport {faUser, faRobot, faRedoAlt} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\n// Adding icons\nlibrary.add(faUser, faRobot, faRedoAlt);\n\nclass BoardLoading extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            text : \"LOADING\"\n        }\n    }\n\n    render() {\n        return (\n            <h1>{this.state.text}</h1>\n        )\n    }\n}\n\nclass BoardMove extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            move : this.props.type\n        }\n        this.MOVE_TYPE = this.props.options;\n    }\n\n    static getDerivedStateFromProps(nextProp, currentState) {\n        if (nextProp.type !== currentState.move) {\n            return {\n                move : nextProp.type\n            };\n        }\n\n        return null;\n    }\n\n    render() {\n        let value;\n        let roleClass;\n        switch (this.state.move) {\n            case this.MOVE_TYPE._:\n                return <></>;\n            case this.MOVE_TYPE.O:\n                value = \"O\";\n                roleClass = \"o\";\n            break;\n            case this.MOVE_TYPE.X:\n                value = \"X\";\n                roleClass = \"x\";\n            break;\n        }\n        return (\n            <div className=\"move\">\n                <div className={roleClass}>\n                    {value}\n                </div>\n            </div>\n        )\n    }\n}\n\nclass BoardNotification extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.options = this.props.options;\n        this.state = {\n            won : this.props.wonState\n        };\n    }\n\n    refreshWindow() {\n        window.location.reload();\n    }\n\n    // On props change\n    static getDerivedStateFromProps(deltaProps, currentState) {\n        if (deltaProps.wonState != currentState.won) {\n            return {\n                won : deltaProps.wonState\n            }            \n        }\n\n        return null;\n    }\n\n    render() {\n        let notification;\n        let notificationClassName;\n\n        switch(this.state.won) {\n            case this.options.WON:\n                notification = \"GAME WON\";\n                notificationClassName = \"visible\";\n                break;\n            case this.options.LOST:\n                notification = \"GAME LOST\";\n                notificationClassName = \"visible\";\n                break;\n            case this.options.DREW:\n                notification = \"GAME DRAWN\";\n                notificationClassName = \"visible\";\n                break;\n        }\n        return (\n            <div id={notificationClassName} className=\"board-notification\">\n                <h1>{notification}</h1>\n                <button className={notificationClassName} onClick={this.refreshWindow}>\n                    <FontAwesomeIcon icon={\"redo-alt\"}></FontAwesomeIcon>\n                </button>\n            </div>\n        )\n    }\n\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        // Properties\n        // Enum MOVE\n        this.MOVE_TYPE = {\n            _ : -1,\n            X : 0,\n            O : 1\n        };\n        // Enum Turns\n        this.TURN = {\n            OTHER : 0,\n            THIS : 1\n        }\n\n        // Enums\n        this.WON_STATE = {\n            NONE : -2,\n            LOST : -1,\n            DREW : 0,\n            WON : 1\n        };\n\n        this.possibleMoves = {\n            \"f\" : 0,\n            \"s\" : 1,\n            \"t\" : 2\n        }\n\n        this.possibleMoveArray = [\"f\", \"s\", \"t\"];\n\n        this.state = {\n            boardState : {\n                ff : this.MOVE_TYPE._,\n                fs : this.MOVE_TYPE._,\n                ft : this.MOVE_TYPE._,\n                sf : this.MOVE_TYPE._,\n                ss : this.MOVE_TYPE._,\n                st : this.MOVE_TYPE._,\n                tf : this.MOVE_TYPE._,\n                ts : this.MOVE_TYPE._,\n                tt : this.MOVE_TYPE._\n            },\n            gameStatus : {\n                // defaults to no connection but sets to true if web-socket\n                // is connected\n                connected : false,\n                status : this.WON_STATE.NONE,\n                turn : null,\n            }\n        }\n\n        // Bindings\n        this.onUserMove = this.onUserMove.bind(this);\n        this.onGameMove = this.onGameMove.bind(this);\n        this.onGameEnd = this.onGameEnd.bind(this);\n        this.updateBoard = this.updateBoard.bind(this);\n    }\n\n    async componentDidMount() {\n        // Send information to the server about this game\n        // Server responds pid and gid\n        try {\n\n            let response = (await (axios.post(\"/api/game/ai\", {\n                data : JSON.stringify({\n                    \"playerType\" : this.props.playerType\n                })\n            }))).data;\n\n            if(response.ai && response.valid) {\n                // Confirmation that right details are sent\n                // Set player id and game id\n                this.pid = response.pid;\n                this.gid = response.gid;\n                this.playerType = response.playerType;\n            }\n            \n        } catch (error) {\n            // Things to do if there are issues while fetching details\n            \n        }\n        // Start game process by invoking socket connection with credentials\n        this.socket = io();\n        this.socket.emit(\"request::ai\", {            \n            game : this.gid,\n            player : this.pid,\n            playerType : this.playerType\n        });\n\n        this.socket.on(\"player::move\", this.onGameMove);\n        this.socket.on(\"game::end\", this.onGameEnd);\n\n    }\n\n    onUserMove(event) {\n        let element = event.currentTarget;\n        let index = element.getAttribute(\"data-location\");\n        let rowIndex = index[0],\n            colIndex = index[1];\n\n        if (colIndex in this.possibleMoves && rowIndex in this.possibleMoves && \n                this.state.boardState[index] === this.MOVE_TYPE._ &&\n                this.state.gameStatus.turn === this.TURN.THIS) {\n            // Logic to register user move\n            let row = this.possibleMoves[rowIndex],\n                col = this.possibleMoves[colIndex];\n                \n            this.socket.emit(\"player::move\", {\n                \"myMove\" : [row, col],\n                \"pid\" : this.pid,\n                \"gid\" : this.gid\n            });\n        }\n    }\n\n    onGameMove(data) {\n        if (data.requestMove) {\n            let gameStatus = Object.assign({}, this.state.gameStatus);\n            gameStatus.turn = this.TURN.THIS;\n            this.setState({\n                gameStatus\n            });\n        } else if (data.responseMove) {\n            let boardState = data.boardState;\n            this.updateBoard(boardState);\n\n        } else if (data.updateMove) {\n            let boardState = data.boardState;\n            this.updateBoard(boardState);\n        }\n    }\n\n    // Indicates game end\n    onGameEnd(data) {\n        // Copy the state\n        let gameStatus = Object.assign({}, this.state.gameStatus);\n        // Evaluate win state\n        if (data.whoWon === this.MOVE_TYPE._) {\n            // Means it is a draw\n            gameStatus.status = this.WON_STATE.DREW;\n        } else if (data.whoWon != this.playerType) {\n            // Then it is a lost game\n            gameStatus.status = this.WON_STATE.LOST;\n        } else {\n            // You Won\n            gameStatus.status = this.WON_STATE.WON;\n        }\n\n        this.setState({\n            gameStatus\n        });\n\n    }\n\n    updateBoard(newState) {\n        let moveArray = this.possibleMoveArray,\n            boardState = Object.assign({}, this.state.boardState);\n                \n        newState.forEach((row, rowIndex) => {\n            row.forEach((positionMove, colIndex) => {\n                if (positionMove != this.MOVE_TYPE._) {\n                    let firstIndex = moveArray[rowIndex],\n                        secondIndex = moveArray[colIndex],\n                        index = firstIndex + secondIndex;\n                    boardState[index] = positionMove;            \n                }\n            });\n        });\n        // Setting board state\n        this.setState({\n            boardState\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"board-wrapper\">\n                <BoardNotification options={this.WON_STATE} wonState={this.state.gameStatus.status}>\n                </BoardNotification>\n                <div className=\"board\">\n                    <div className=\"row\">\n                        <div className=\"col\" data-location={\"ff\"} onClick={this.onUserMove}>\n                            <BoardMove options={this.MOVE_TYPE} \n                                type={this.state.boardState.ff}></BoardMove>   \n                        </div>\n                        <div className=\"col middle\" data-location={\"fs\"} onClick={this.onUserMove}>\n                            <BoardMove options={this.MOVE_TYPE} \n                                type={this.state.boardState.fs}></BoardMove>\n                        </div>\n                        <div className=\"col\" data-location={\"ft\"} onClick={this.onUserMove}>\n                            <BoardMove options={this.MOVE_TYPE} \n                                type={this.state.boardState.ft}></BoardMove>\n                        </div>\n                    </div>\n                    <div className=\"row middle\">\n                        <div className=\"col\" data-location={\"sf\"} onClick={this.onUserMove}>\n                            <BoardMove options={this.MOVE_TYPE} \n                                type={this.state.boardState.sf}></BoardMove>\n                        </div>\n                        <div className=\"col middle\" data-location={\"ss\"} onClick={this.onUserMove}>\n                            <BoardMove options={this.MOVE_TYPE} \n                                type={this.state.boardState.ss}></BoardMove>\n                        </div>\n                        <div className=\"col\" data-location={\"st\"} onClick={this.onUserMove}>\n                            <BoardMove options={this.MOVE_TYPE} \n                                type={this.state.boardState.st}></BoardMove>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col\" data-location={\"tf\"} onClick={this.onUserMove}>\n                            <BoardMove options={this.MOVE_TYPE} \n                                type={this.state.boardState.tf}></BoardMove>\n                        </div>\n                        <div className=\"col middle\" data-location={\"ts\"} onClick={this.onUserMove}>\n                            <BoardMove options={this.MOVE_TYPE} \n                                type={this.state.boardState.ts}></BoardMove>\n                        </div>\n                        <div className=\"col\" data-location={\"tt\"} onClick={this.onUserMove}>\n                            <BoardMove options={this.MOVE_TYPE} \n                                type={this.state.boardState.tt}></BoardMove>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass GameOption extends React.Component {\n    constructor(props) {\n        super(props);\n        // Bindings\n        this.humanGame = this.humanGame.bind(this);\n        this.aiGame = this.aiGame.bind(this);\n        // Information about type\n        this.information = {\n            \"ai\" : {\n                label : \"ROBO\",\n                icon : \"robot\",\n                handle : this.aiGame\n            },\n            \"human\" : {\n                label : \"HUMAN\",\n                icon : \"user\",\n                handle : this.humanGame\n            }\n        }\n    }\n\n    humanGame() {\n        \n    }\n\n    aiGame() {\n        \n    }\n\n    render() {\n        const type = this.props.type;\n        return (\n            <div className={type} onClick={this.information[type].handle}>\n                <Link to={`new/${type}`}>\n                    <div className=\"icon\">\n                        <FontAwesomeIcon icon={this.information[type].icon}></FontAwesomeIcon>\n                    </div>\n                    <div className=\"label\">\n                        {this.information[type].label}\n                    </div>\n                    </Link>\n            </div>\n        )\n    }\n}\n\nclass GameOptionMenu extends React.Component {\n    render() {\n        return (\n            <div className=\"gameDetails\">\n                <div className=\"title\">\n                    <h1>AGAINST</h1>\n                </div>\n                <div className=\"options\">\n                    <Router>\n                        <GameOption type=\"human\"></GameOption>\n                        <GameOption type=\"ai\"></GameOption>\n                    </Router>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass FetchName extends React.Component {\n    render() {\n        return (\n            <div>\n                Enter Your Name Here\n            </div>\n        )\n    }\n}\n\nclass MainMenu extends React.Component {\n    render() {\n        return (\n            <Router>\n                <Route exact path=\"/\">\n                    <div className=\"menu\">\n                        <div className=\"title\">\n                            <h1>Tic Tac Toe</h1>\n                        </div>\n                        <div className=\"options\">\n                            <Router>\n                                <Link to=\"new\">\n                                    <div className=\"new\">\n                                        NEW GAME\n                                    </div>\n                                </Link>\n                                <Link to=\"/join\">\n                                    <div className=\"join\">\n                                        JOIN GAME\n                                    </div>\n                                </Link>\n                            </Router>\n                        </div>\n                    </div>\n                </Route>\n                <Route exact path=\"/new\">\n                    <GameOptionMenu></GameOptionMenu>   \n                </Route>\n                <Route exact path=\"/new/human\">\n                    <Game></Game>\n                </Route>\n                <Route exact path=\"/new/ai\">\n                    <Game ai></Game>\n                </Route>\n            </Router>\n        )\n    }\n}\n\n\nclass RoleSelect extends React.Component {\n    constructor(props) {\n        super(props);\n        // Binding\n        this.onSelect = this.onSelect.bind(this);\n        // References\n        this.x = React.createRef();\n        this.o = React.createRef();\n    }\n\n    onSelect(event) {\n        let target = event.currentTarget;\n        if (this.x.current == target) {\n            // For X player type\n            this.props.onSelect(this.props.options.X);\n        } else if (this.o.current == target) {\n            // For O player type\n            this.props.onSelect(this.props.options.O);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"role-select\">\n                <div className=\"title\">\n                    <h1>PLAYER TYPE</h1>\n                </div>\n                <div className=\"tiles\">\n                    <div className=\"roles x\" ref={this.x} onClick={this.onSelect}>X</div>\n                    <div className=\"roles o\" ref={this.o} onClick={this.onSelect}>O</div>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.showStates = {\n            LOADING : 0,\n            ROLESELECT : 1,\n            HUMANNAME : 2,\n            GAMEINIT : 3\n        }\n        this.state = {\n            SHOW_STATE : this.showStates.LOADING,\n        };\n        // Player type enum\n        this.PLAYER_TYPE = {\n            X : 0,\n            O : 1\n        };\n        this.playerType = null;\n        // Bindings\n        this.onRoleSelect = this.onRoleSelect.bind(this);\n    }\n\n    componentDidMount() {\n        if (this.props.ai) {\n            // If AI then no need for name and invitation code\n            this.setState({\n                SHOW_STATE : this.showStates.ROLESELECT\n            })\n        } else {\n            // Else if human the other person might need the \n            // this person's name and invitation code\n            this.setState({\n                SHOW_STATE : this.showStates.HUMANNAME\n            })\n        }\n    }\n\n    async onRoleSelect(type) {\n        if (this.PLAYER_TYPE.X === type || this.PLAYER_TYPE.O === type) {\n            this.playerType = type;\n            this.setState({\n                SHOW_STATE : this.showStates.GAMEINIT\n            })\n        }\n    }\n\n    render() {\n        let content;\n        switch (this.state.SHOW_STATE) {\n            case this.showStates.LOADING:\n                content = <BoardLoading></BoardLoading>;\n                break;\n            case this.showStates.ROLESELECT:\n                content = <RoleSelect onSelect={this.onRoleSelect} options={this.PLAYER_TYPE}></RoleSelect>;\n                break;\n            case this.showStates.GAMEINIT:\n                content = <Board ai={this.props.ai} playerType={this.playerType} options={this.PLAYER_TYPE} ></Board>;\n                break;\n            case this.showStates.HUMANNAME:\n                content = <FetchName></FetchName>;\n                break;\n        }\n        return content;\n    }\n}\n\nclass GameRoot extends React.Component {\n    render() {\n        return (\n            <MainMenu></MainMenu>\n        )\n    }\n}\n\nexport default GameRoot;","import React from \"react\";\nimport Game from \"./Game.js\";\nimport ReactDOM from \"react-dom\";\n\n\nReactDOM.render(<Game />, document.getElementById(\"root\"))"],"sourceRoot":""}