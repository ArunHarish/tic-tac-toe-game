{"version":3,"sources":["Game.js","index.js"],"names":["library","add","faUser","faRobot","BoardLoading","props","state","text","this","React","Component","BoardMove","move","type","MOVE_TYPE","options","value","_","O","X","className","nextProp","currentState","Board","boardState","ff","fs","ft","sf","ss","st","tf","ts","tt","gameStatus","connected","won","result","pid","gid","playerType","onClick","setState","prevState","Object","assign","GameOption","humanGame","bind","aiGame","information","label","icon","handle","to","GameOptionMenu","FetchName","MainMenu","exact","path","RoleSelect","onSelect","x","createRef","o","event","target","currentTarget","current","ref","Game","showStates","LOADING","ROLESELECT","GAMEINIT","SHOW_STATE","PLAYER_TYPE","connection","onRoleSelect","disconnect","axios","post","details","data","ai","gameID","playerID","JSON","stringify","headers","valid","content","GameRoot","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5f9af4cc.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./css/game.css\";\nimport io from \"socket.io-client\";\nimport axios from \"axios\";\nimport {Link, HashRouter as Router, Route} from \"react-router-dom\";\nimport {library} from \"@fortawesome/fontawesome-svg-core\";\nimport {faUser, faRobot} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\n// Adding icons\nlibrary.add(faUser, faRobot);\n\nclass BoardLoading extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            text : \"LOADING\"\n        }\n    }\n\n    render() {\n        return (\n            <h1>{this.state.text}</h1>\n        )\n    }\n}\n\nclass BoardMove extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            move : this.props.type\n        }\n        this.MOVE_TYPE = this.props.options;\n    }\n\n    static getDerivedStateFromProps(nextProp, currentState) {\n        if (nextProp.type !== currentState.move) {\n            return {\n                move : nextProp.type\n            };\n        }\n\n        return null;\n    }\n\n    render() {\n        let value;\n        switch (this.state.move) {\n            case this.MOVE_TYPE._:\n                return <></>;\n            case this.MOVE_TYPE.O:\n                value = \"O\";\n            break;\n            case this.MOVE_TYPE.X:\n                value = \"X\";\n            break;\n        }\n        return (\n            <div className=\"move\">{value}</div>\n        )\n    }\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.MOVE_TYPE = {\n            _ : -1,\n            X : 1,\n            O : 0\n        };\n        // this.state = {boardState : {}}\n        // [\n        //     [this.MOVE_TYPE._, this.MOVE_TYPE._, this.MOVE_TYPE._]\n        // ]\n\n        this.state = {\n            boardState : {\n                ff : this.MOVE_TYPE._,\n                fs : this.MOVE_TYPE._,\n                ft : this.MOVE_TYPE._,\n                sf : this.MOVE_TYPE._,\n                ss : this.MOVE_TYPE._,\n                st : this.MOVE_TYPE._,\n                tf : this.MOVE_TYPE._,\n                ts : this.MOVE_TYPE._,\n                tt : this.MOVE_TYPE._\n            }\n            ,\n            gameStatus : {\n                // defaults to no connection but sets to true if web-socket\n                // is connected\n                connected : false, \n                won : false,\n                // if won then this must be non-null\n                result : null \n            }\n        }\n    }\n\n    onUserTurn() {\n\n    }\n\n    onBoardMove() {\n\n    }\n\n    // Indicates game end\n    onGameEnd() {\n\n    }\n\n    componentDidMount() {\n        let pid = this.props.pid,\n            gid = this.props.gid,\n            playerType = this.props.playerType;\n    }\n\n    render() {\n        return (\n            <div className=\"board\">\n                <div className=\"row\">\n                    <div className=\"col\" onClick={() => {\n                        this.setState(prevState => {\n                            // Copying board state to new object\n                            let boardState = Object.assign({}, prevState.boardState);\n                            boardState.ff = this.MOVE_TYPE.X; \n                            return {\n                                boardState // Since boardState : boardState :D\n                            }\n                        });\n                    }}>\n                        <BoardMove options={this.MOVE_TYPE} \n                            type={this.state.boardState.ff}></BoardMove>   \n                    </div>\n                    <div className=\"col middle\">\n                        <BoardMove options={this.MOVE_TYPE} \n                            type={this.state.boardState.fs}></BoardMove>\n                    </div>\n                    <div className=\"col\">\n                        <BoardMove options={this.MOVE_TYPE} \n                            type={this.state.boardState.ft}></BoardMove>\n                    </div>\n                </div>\n                <div className=\"row middle\">\n                    <div className=\"col\">\n                        <BoardMove options={this.MOVE_TYPE} \n                            type={this.state.boardState.sf}></BoardMove>\n                    </div>\n                    <div className=\"col middle\">\n                        <BoardMove options={this.MOVE_TYPE} \n                            type={this.state.boardState.ss}></BoardMove>\n                    </div>\n                    <div className=\"col\">\n                        <BoardMove options={this.MOVE_TYPE} \n                            type={this.state.boardState.st}></BoardMove>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <BoardMove options={this.MOVE_TYPE} \n                            type={this.state.boardState.tf}></BoardMove>\n                    </div>\n                    <div className=\"col middle\">\n                        <BoardMove options={this.MOVE_TYPE} \n                            type={this.state.boardState.ts}></BoardMove>\n                    </div>\n                    <div className=\"col\">\n                        <BoardMove options={this.MOVE_TYPE} \n                            type={this.state.boardState.tt}></BoardMove>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass GameOption extends React.Component {\n    constructor(props) {\n        super(props);\n        // Bindings\n        this.humanGame = this.humanGame.bind(this);\n        this.aiGame = this.aiGame.bind(this);\n        // Information about type\n        this.information = {\n            \"ai\" : {\n                label : \"ROBO\",\n                icon : \"robot\",\n                handle : this.aiGame\n            },\n            \"human\" : {\n                label : \"HUMAN\",\n                icon : \"user\",\n                handle : this.humanGame\n            }\n        }\n    }\n\n    humanGame() {\n        \n    }\n\n    aiGame() {\n        \n    }\n\n    render() {\n        const type = this.props.type;\n        return (\n            <div className={type} onClick={this.information[type].handle}>\n                <Link to={`new/${type}`}>\n                    <div className=\"icon\">\n                        <FontAwesomeIcon icon={this.information[type].icon}></FontAwesomeIcon>\n                    </div>\n                    <div className=\"label\">\n                        {this.information[type].label}\n                    </div>\n                    </Link>\n            </div>\n        )\n    }\n}\n\nclass GameOptionMenu extends React.Component {\n    render() {\n        return (\n            <div className=\"gameDetails\">\n                <div className=\"title\">\n                    <h1>AGAINST</h1>\n                </div>\n                <div className=\"options\">\n                    <Router>\n                        <GameOption type=\"human\"></GameOption>\n                        <GameOption type=\"ai\"></GameOption>\n                    </Router>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass FetchName extends React.Component {\n    render() {\n        return (\n            <div>\n                Enter Your Name Here\n            </div>\n        )\n    }\n}\n\nclass MainMenu extends React.Component {\n    render() {\n        return (\n            <Router>\n                <Route exact path=\"/\">\n                    <div className=\"menu\">\n                        <div className=\"title\">\n                            <h1>Tic Tac Toe</h1>\n                        </div>\n                        <div className=\"options\">\n                            <Router>\n                                <Link to=\"new\">\n                                    <div className=\"new\">\n                                        NEW GAME\n                                    </div>\n                                </Link>\n                                <Link to=\"/join\">\n                                    <div className=\"join\">\n                                        JOIN GAME\n                                    </div>\n                                </Link>\n                            </Router>\n                        </div>\n                    </div>\n                </Route>\n                <Route exact path=\"/new\">\n                    <GameOptionMenu></GameOptionMenu>   \n                </Route>\n                <Route exact path=\"/new/human\">\n                    <FetchName></FetchName>\n                </Route>\n                <Route exact path=\"/new/ai\">\n                    <Game></Game>\n                </Route>\n                <Route exact path=\"/play/ai/:gid\">\n                    \n                </Route>\n            </Router>\n        )\n    }\n}\n\n\nclass RoleSelect extends React.Component {\n    constructor(props) {\n        super(props);\n        // Binding\n        this.onSelect = this.onSelect.bind(this);\n        // References\n        this.x = React.createRef();\n        this.o = React.createRef();\n    }\n\n    onSelect(event) {\n        let target = event.currentTarget;\n        if (this.x.current == target) {\n            // For X player type\n            this.props.onSelect(this.props.options.X);\n        } else if (this.o.current == target) {\n            // For O player type\n            this.props.onSelect(this.props.options.O);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"role-select\">\n                <div className=\"title\">\n                    <h1>PLAYER TYPE</h1>\n                </div>\n                <div className=\"tiles\">\n                    <div className=\"roles x\" ref={this.x} onClick={this.onSelect}>X</div>\n                    <div className=\"roles o\" ref={this.o} onClick={this.onSelect}>O</div>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.showStates = {\n            LOADING : 0,\n            ROLESELECT : 1,\n            GAMEINIT : 2\n        }\n        this.state = {\n            SHOW_STATE : this.showStates.LOADING \n        };\n        // Player type enum\n        this.PLAYER_TYPE = {\n            X : 0,\n            O : 1\n        };\n        // Setting game details\n        this.gid = null;\n        this.pid = null;\n        this.playerType = null;\n        // Setting socket.io connection \n        this.connection = null;\n        // Bindings\n        this.onRoleSelect = this.onRoleSelect.bind(this);\n    }\n\n    componentWillUnmount() {\n        if (this.connection) {\n            this.connection.disconnect();\n        }\n    }\n\n    async componentDidMount() {\n        let details = (await axios.post(\"/api/game/ai\")).data;\n        if (details.ai) {\n            this.setState({\n                SHOW_STATE : this.showStates.ROLESELECT\n            });\n            this.gameID = details.gid;\n            this.playerID = details.pid;\n        }\n    }\n\n    async onRoleSelect(type) {\n        if (this.PLAYER_TYPE.X === type || this.PLAYER_TYPE.O === type) {\n            this.playerType = type;\n            try {\n                // Only if correct player type is provided\n                // send request with game id and player type and id\n                let response = (await axios.post(\"/api/game/ai/player/\", {\n                    data : JSON.stringify({\n                        \"playerType\" : this.playerType,\n                        \"gid\" : this.gameID,\n                        \"pid\" : this.playerID\n                    }),\n                    headers : {\n                        \"Content-Type\" : \"application/json\"\n                    }\n                })).data;\n\n                if (response.valid) {\n                    // Show the game content\n                    this.setState({\n                        SHOW_STATE : this.showStates.GAMEINIT\n                    });\n                }\n\n            } catch {\n                // Do things required to indicate game error\n            }\n        }\n    }\n\n    render() {\n        let content;\n        switch (this.state.SHOW_STATE) {\n            case this.showStates.LOADING:\n                content = <BoardLoading></BoardLoading>;\n                break;\n            case this.showStates.ROLESELECT:\n                content = <RoleSelect onSelect={this.onRoleSelect} options={this.PLAYER_TYPE}></RoleSelect>;\n                break;\n            case this.showStates.GAMEINIT:\n                content = <Board ai={true} gid={this.gameID} pid={this.playerID} playerType={this.playerType} ></Board>;\n                break;\n        }\n        return content;\n    }\n}\n\nclass GameRoot extends React.Component {\n    render() {\n        return (\n            <MainMenu></MainMenu>\n        )\n    }\n}\n\nexport default GameRoot;","import React from \"react\";\nimport Game from \"./Game.js\";\nimport ReactDOM from \"react-dom\";\n\n\nReactDOM.render(<Game />, document.getElementById(\"root\"))"],"sourceRoot":""}