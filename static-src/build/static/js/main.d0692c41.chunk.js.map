{"version":3,"sources":["Game.js","index.js"],"names":["library","add","faUser","faRobot","BoardLoading","props","state","text","this","React","Component","BoardMove","move","type","MOVE_TYPE","options","value","_","O","X","className","nextProp","currentState","Board","TURN","OTHER","THIS","boardState","ff","fs","ft","sf","ss","st","tf","ts","tt","gameStatus","connected","won","status","result","turn","onUserMove","bind","onGameMove","onGameEnd","axios","post","data","JSON","stringify","playerType","response","ai","valid","pid","gid","socket","io","emit","game","player","on","event","index","currentTarget","getAttribute","rowIndex","colIndex","possibleMoves","row","col","requestMove","Object","assign","setState","responseMove","console","log","myMove","updateMove","deltaState","data-location","onClick","GameOption","humanGame","aiGame","information","label","icon","handle","to","GameOptionMenu","FetchName","MainMenu","exact","path","RoleSelect","onSelect","x","createRef","o","target","current","ref","Game","showStates","LOADING","ROLESELECT","HUMANNAME","GAMEINIT","SHOW_STATE","PLAYER_TYPE","onRoleSelect","content","GameRoot","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d0692c41.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./css/game.css\";\nimport io from \"socket.io-client\";\nimport axios from \"axios\";\nimport {Link, HashRouter as Router, Route} from \"react-router-dom\";\nimport {library} from \"@fortawesome/fontawesome-svg-core\";\nimport {faUser, faRobot} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\n// Adding icons\nlibrary.add(faUser, faRobot);\n\nclass BoardLoading extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            text : \"LOADING\"\n        }\n    }\n\n    render() {\n        return (\n            <h1>{this.state.text}</h1>\n        )\n    }\n}\n\nclass BoardMove extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            move : this.props.type\n        }\n        this.MOVE_TYPE = this.props.options;\n    }\n\n    static getDerivedStateFromProps(nextProp, currentState) {\n        if (nextProp.type !== currentState.move) {\n            return {\n                move : nextProp.type\n            };\n        }\n\n        return null;\n    }\n\n    render() {\n        let value;\n        switch (this.state.move) {\n            case this.MOVE_TYPE._:\n                return <></>;\n            case this.MOVE_TYPE.O:\n                value = \"O\";\n            break;\n            case this.MOVE_TYPE.X:\n                value = \"X\";\n            break;\n        }\n        return (\n            <div className=\"move\">{value}</div>\n        )\n    }\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        // Enum MOVE\n        this.MOVE_TYPE = {\n            _ : -1,\n            X : 0,\n            O : 1\n        };\n        // Enum PLAYER\n        this.TURN = {\n            OTHER : 0,\n            THIS : 1\n        }\n\n        this.state = {\n            boardState : {\n                ff : this.MOVE_TYPE._,\n                fs : this.MOVE_TYPE._,\n                ft : this.MOVE_TYPE._,\n                sf : this.MOVE_TYPE._,\n                ss : this.MOVE_TYPE._,\n                st : this.MOVE_TYPE._,\n                tf : this.MOVE_TYPE._,\n                ts : this.MOVE_TYPE._,\n                tt : this.MOVE_TYPE._\n            },\n            gameStatus : {\n                // defaults to no connection but sets to true if web-socket\n                // is connected\n                connected : false, \n                won : {\n                    status : false,\n                    result : null\n                },\n                turn : null,\n            }\n        }\n\n        // Bindings\n        this.onUserMove = this.onUserMove.bind(this);\n        this.onGameMove = this.onGameMove.bind(this);\n        this.onGameEnd = this.onGameEnd.bind(this);\n    }\n\n    async componentDidMount() {\n        // Send information to the server about this game\n        // Server responds pid and gid\n        try {\n\n            let response = (await (axios.post(\"/api/game/ai\", {\n                data : JSON.stringify({\n                    \"playerType\" : this.props.playerType\n                })\n            }))).data;\n\n            if(response.ai && response.valid) {\n                // Confirmation that right details are sent\n                // Set player id and game id\n                this.pid = response.pid;\n                this.gid = response.gid;\n                this.playerType = response.playerType;\n            }\n            \n        } catch (error) {\n            // Things to do if there are issues while fetching details\n            \n        }\n        // Start game process by invoking socket connection with credentials\n        this.socket = io();\n        this.socket.emit(\"request::ai\", {            \n            game : this.gid,\n            player : this.pid,\n            playerType : this.playerType\n        });\n\n        this.socket.on(\"player::move\", this.onGameMove);\n        this.socket.on(\"game::end\", this.onGameEnd);\n\n    }\n\n    onUserMove(event) {\n        let element = event.currentTarget;\n        let index = element.getAttribute(\"data-location\");\n        let rowIndex = index[0],\n            colIndex = index[1];\n\n        let possibleMoves = {\"f\":0,\"s\":1,\"t\":2};\n        if (colIndex in possibleMoves && rowIndex in possibleMoves && \n                this.state.boardState[index] === this.MOVE_TYPE._ &&\n                this.state.gameStatus.turn === this.TURN.THIS) {\n            // Logic to register user move\n            let row = possibleMoves[rowIndex],\n                col = possibleMoves[colIndex];\n                \n            this.socket.emit(\"player::move\", {\n                \"myMove\" : [row, col],\n                \"pid\" : this.pid,\n                \"gid\" : this.gid\n            });\n        }\n    }\n\n    onGameMove(data) {\n        if (data.requestMove) {\n            let gameStatus = Object.assign({}, this.state.gameStatus);\n            gameStatus.turn = this.TURN.THIS;\n            this.setState({\n                gameStatus\n            });\n        } else if (data.responseMove) {\n            console.log(data.myMove);\n        } else if (data.updateMove) {\n            console.log(data.deltaState)\n        }\n    }\n\n    // Indicates game end\n    onGameEnd() {\n\n    }\n\n    render() {\n        return (\n            <div className=\"board\">\n                <div className=\"row\">\n                    <div className=\"col\" data-location={\"ff\"} onClick={this.onUserMove}>\n                        <BoardMove options={this.MOVE_TYPE} \n                            type={this.state.boardState.ff}></BoardMove>   \n                    </div>\n                    <div className=\"col middle\" data-location={\"fs\"} onClick={this.onUserMove}>\n                        <BoardMove options={this.MOVE_TYPE} \n                            type={this.state.boardState.fs}></BoardMove>\n                    </div>\n                    <div className=\"col\" data-location={\"ft\"} onClick={this.onUserMove}>\n                        <BoardMove options={this.MOVE_TYPE} \n                            type={this.state.boardState.ft}></BoardMove>\n                    </div>\n                </div>\n                <div className=\"row middle\">\n                    <div className=\"col\" data-location={\"sf\"} onClick={this.onUserMove}>\n                        <BoardMove options={this.MOVE_TYPE} \n                            type={this.state.boardState.sf}></BoardMove>\n                    </div>\n                    <div className=\"col middle\" data-location={\"ss\"} onClick={this.onUserMove}>\n                        <BoardMove options={this.MOVE_TYPE} \n                            type={this.state.boardState.ss}></BoardMove>\n                    </div>\n                    <div className=\"col\" data-location={\"st\"} onClick={this.onUserMove}>\n                        <BoardMove options={this.MOVE_TYPE} \n                            type={this.state.boardState.st}></BoardMove>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col\" data-location={\"tf\"} onClick={this.onUserMove}>\n                        <BoardMove options={this.MOVE_TYPE} \n                            type={this.state.boardState.tf}></BoardMove>\n                    </div>\n                    <div className=\"col middle\" data-location={\"ts\"} onClick={this.onUserMove}>\n                        <BoardMove options={this.MOVE_TYPE} \n                            type={this.state.boardState.ts}></BoardMove>\n                    </div>\n                    <div className=\"col\" data-location={\"tt\"} onClick={this.onUserMove}>\n                        <BoardMove options={this.MOVE_TYPE} \n                            type={this.state.boardState.tt}></BoardMove>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass GameOption extends React.Component {\n    constructor(props) {\n        super(props);\n        // Bindings\n        this.humanGame = this.humanGame.bind(this);\n        this.aiGame = this.aiGame.bind(this);\n        // Information about type\n        this.information = {\n            \"ai\" : {\n                label : \"ROBO\",\n                icon : \"robot\",\n                handle : this.aiGame\n            },\n            \"human\" : {\n                label : \"HUMAN\",\n                icon : \"user\",\n                handle : this.humanGame\n            }\n        }\n    }\n\n    humanGame() {\n        \n    }\n\n    aiGame() {\n        \n    }\n\n    render() {\n        const type = this.props.type;\n        return (\n            <div className={type} onClick={this.information[type].handle}>\n                <Link to={`new/${type}`}>\n                    <div className=\"icon\">\n                        <FontAwesomeIcon icon={this.information[type].icon}></FontAwesomeIcon>\n                    </div>\n                    <div className=\"label\">\n                        {this.information[type].label}\n                    </div>\n                    </Link>\n            </div>\n        )\n    }\n}\n\nclass GameOptionMenu extends React.Component {\n    render() {\n        return (\n            <div className=\"gameDetails\">\n                <div className=\"title\">\n                    <h1>AGAINST</h1>\n                </div>\n                <div className=\"options\">\n                    <Router>\n                        <GameOption type=\"human\"></GameOption>\n                        <GameOption type=\"ai\"></GameOption>\n                    </Router>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass FetchName extends React.Component {\n    render() {\n        return (\n            <div>\n                Enter Your Name Here\n            </div>\n        )\n    }\n}\n\nclass MainMenu extends React.Component {\n    render() {\n        return (\n            <Router>\n                <Route exact path=\"/\">\n                    <div className=\"menu\">\n                        <div className=\"title\">\n                            <h1>Tic Tac Toe</h1>\n                        </div>\n                        <div className=\"options\">\n                            <Router>\n                                <Link to=\"new\">\n                                    <div className=\"new\">\n                                        NEW GAME\n                                    </div>\n                                </Link>\n                                <Link to=\"/join\">\n                                    <div className=\"join\">\n                                        JOIN GAME\n                                    </div>\n                                </Link>\n                            </Router>\n                        </div>\n                    </div>\n                </Route>\n                <Route exact path=\"/new\">\n                    <GameOptionMenu></GameOptionMenu>   \n                </Route>\n                <Route exact path=\"/new/human\">\n                    <Game></Game>\n                </Route>\n                <Route exact path=\"/new/ai\">\n                    <Game ai></Game>\n                </Route>\n            </Router>\n        )\n    }\n}\n\n\nclass RoleSelect extends React.Component {\n    constructor(props) {\n        super(props);\n        // Binding\n        this.onSelect = this.onSelect.bind(this);\n        // References\n        this.x = React.createRef();\n        this.o = React.createRef();\n    }\n\n    onSelect(event) {\n        let target = event.currentTarget;\n        if (this.x.current == target) {\n            // For X player type\n            this.props.onSelect(this.props.options.X);\n        } else if (this.o.current == target) {\n            // For O player type\n            this.props.onSelect(this.props.options.O);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"role-select\">\n                <div className=\"title\">\n                    <h1>PLAYER TYPE</h1>\n                </div>\n                <div className=\"tiles\">\n                    <div className=\"roles x\" ref={this.x} onClick={this.onSelect}>X</div>\n                    <div className=\"roles o\" ref={this.o} onClick={this.onSelect}>O</div>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.showStates = {\n            LOADING : 0,\n            ROLESELECT : 1,\n            HUMANNAME : 2,\n            GAMEINIT : 3\n        }\n        this.state = {\n            SHOW_STATE : this.showStates.LOADING,\n        };\n        // Player type enum\n        this.PLAYER_TYPE = {\n            X : 0,\n            O : 1\n        };\n        this.playerType = null;\n        // Bindings\n        this.onRoleSelect = this.onRoleSelect.bind(this);\n    }\n\n    componentDidMount() {\n        if (this.props.ai) {\n            // If AI then no need for name and invitation code\n            this.setState({\n                SHOW_STATE : this.showStates.ROLESELECT\n            })\n        } else {\n            // Else if human the other person might need the \n            // this person's name and invitation code\n            this.setState({\n                SHOW_STATE : this.showStates.HUMANNAME\n            })\n        }\n    }\n\n    async onRoleSelect(type) {\n        if (this.PLAYER_TYPE.X === type || this.PLAYER_TYPE.O === type) {\n            this.playerType = type;\n            this.setState({\n                SHOW_STATE : this.showStates.GAMEINIT\n            })\n        }\n    }\n\n    render() {\n        let content;\n        switch (this.state.SHOW_STATE) {\n            case this.showStates.LOADING:\n                content = <BoardLoading></BoardLoading>;\n                break;\n            case this.showStates.ROLESELECT:\n                content = <RoleSelect onSelect={this.onRoleSelect} options={this.PLAYER_TYPE}></RoleSelect>;\n                break;\n            case this.showStates.GAMEINIT:\n                content = <Board ai={this.props.ai} playerType={this.playerType} options={this.PLAYER_TYPE} ></Board>;\n                break;\n            case this.showStates.HUMANNAME:\n                content = <FetchName></FetchName>;\n                break;\n        }\n        return content;\n    }\n}\n\nclass GameRoot extends React.Component {\n    render() {\n        return (\n            <MainMenu></MainMenu>\n        )\n    }\n}\n\nexport default GameRoot;","import React from \"react\";\nimport Game from \"./Game.js\";\nimport ReactDOM from \"react-dom\";\n\n\nReactDOM.render(<Game />, document.getElementById(\"root\"))"],"sourceRoot":""}